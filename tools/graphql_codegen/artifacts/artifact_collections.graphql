fragment ArtifactCollectionFragment on ArtifactCollection {
  __typename
  id
  name
  description
  createdAt
  tags {
    edges {
      node {
        ...TagFragment
      }
    }
  }
  aliases(after: $aliasesCursor, first: $aliasesPerPage) @include(if: $includeAliases) {
    edges {
      node {
        ...ArtifactAliasFragment
      }
    }
  }
}

fragment ArtifactCollectionConnectionFragment on ArtifactCollectionConnection {
  pageInfo {
    ...PageInfoFragment
  }
  totalCount
  edges {
    node {
      ...ArtifactCollectionFragment
    }
  }
}

mutation DeleteArtifactCollection($id: ID!, $isSequence: Boolean!) {
  deleteArtifactSequence(input: { artifactSequenceID: $id }) @include(if: $isSequence) {
    artifactCollection {
      __typename
      state
    }
  }
  deleteArtifactPortfolio(input: { artifactPortfolioID: $id }) @skip(if: $isSequence) {
    artifactCollection {
      __typename
      state
    }
  }
}

mutation UpdateArtifactCollection(
  $id: ID!
  $name: String
  $description: String
  $isSequence: Boolean!
) {
  updateArtifactSequence(
    input: { artifactSequenceID: $id, name: $name, description: $description }
  ) @include(if: $isSequence) {
    artifactCollection {
      __typename
      id
      name
      description
    }
  }
  updateArtifactPortfolio(
    input: { artifactPortfolioID: $id, name: $name, description: $description }
  ) @skip(if: $isSequence) {
    artifactCollection {
      __typename
      id
      name
      description
    }
  }
}

mutation MoveArtifactCollection($artifactSequenceID: ID!, $destinationArtifactTypeName: String!) {
  moveArtifactSequence(
    input: {
      artifactSequenceID: $artifactSequenceID
      destinationArtifactTypeName: $destinationArtifactTypeName
    }
  ) {
    artifactCollection {
      __typename
      id
      name
      description
    }
  }
}

mutation CreateArtifactCollectionTagAssignments(
  $entityName: String!
  $projectName: String!
  $artifactCollectionName: String!
  $tags: [TagInput!]!
) {
  createArtifactCollectionTagAssignments(
    input: {
      entityName: $entityName
      projectName: $projectName
      artifactCollectionName: $artifactCollectionName
      tags: $tags
    }
  ) {
    tags {
      ...TagFragment
    }
  }
}

mutation DeleteArtifactCollectionTagAssignments(
  $entityName: String!
  $projectName: String!
  $artifactCollectionName: String!
  $tags: [TagInput!]!
) {
  deleteArtifactCollectionTagAssignments(
    input: {
      entityName: $entityName
      projectName: $projectName
      artifactCollectionName: $artifactCollectionName
      tags: $tags
    }
  ) {
    success
  }
}

query ProjectArtifactCollections(
  $entityName: String!
  $projectName: String!
  $artifactTypeName: String!
  $cursor: String
  $aliasesCursor: String
  $aliasesPerPage: Int = 0
  $includeAliases: Boolean = false
) {
  project(name: $projectName, entityName: $entityName) {
    artifactType(name: $artifactTypeName) {
      # NOTE: The node being aliased is named:
      # - `artifactCollections` for new servers
      # - `artifactSequences` for old servers
      artifactCollections: artifactCollections(after: $cursor) {
        ...ArtifactCollectionConnectionFragment
      }
    }
  }
}

query ProjectArtifactCollection(
  $entityName: String!
  $projectName: String!
  $artifactTypeName: String!
  $artifactCollectionName: String!
  $aliasesCursor: String
  $aliasesPerPage: Int = 1000
  $includeAliases: Boolean = true
) {
  project(name: $projectName, entityName: $entityName) {
    artifactType(name: $artifactTypeName) {
      # NOTE: The node being aliased is named:
      # - `artifactCollection` for new servers
      # - `artifactSequence` for old servers
      artifactCollection: artifactCollection(name: $artifactCollectionName) {
        ...ArtifactCollectionFragment
      }
      # TODO(tonyyli): Do we need this?  Delete if not.
      # artifactSequence(name: $artifactCollectionName) {
      #   __typename
      # }
    }
  }
}

fragment ArtifactPortfolioTypeFields on ArtifactPortfolio {
  __typename
  id
  name
}

fragment ArtifactSequenceTypeFields on ArtifactSequence {
  __typename
  id
  name
}
