# Generated by ariadne-codegen
# Source: core/api/graphql/schemas/schema-latest.graphql

from __future__ import annotations

from typing import Optional

from pydantic import Field

from wandb._pydantic import GQLBase, GQLId

from .enums import (
    AlertSeverity,
    EventTriggeringConditionType,
    TriggeredActionType,
    TriggerScopeType,
)


class CreateGenericWebhookIntegrationInput(GQLBase):
    entity_name: str
    url_endpoint: str
    name: str
    secret_ref: Optional[str] = None
    access_token_ref: Optional[str] = None
    client_mutation_id: Optional[str] = None


class QueueJobActionInput(GQLBase):
    queue_id: GQLId = Field(alias="queueID")
    template: str


class NotificationActionInput(GQLBase):
    integration_id: GQLId = Field(alias="integrationID")
    title: Optional[str] = None
    message: Optional[str] = None
    severity: Optional[AlertSeverity] = None


class GenericWebhookActionInput(GQLBase):
    integration_id: GQLId = Field(alias="integrationID")
    request_payload: Optional[str] = None


class NoOpTriggeredActionInput(GQLBase):
    no_op: Optional[bool] = None


class TriggeredActionConfig(GQLBase):
    queue_job_action_input: Optional[QueueJobActionInput] = None
    notification_action_input: Optional[NotificationActionInput] = None
    generic_webhook_action_input: Optional[GenericWebhookActionInput] = None
    no_op_action_input: Optional[NoOpTriggeredActionInput] = None


class CreateFilterTriggerInput(GQLBase):
    name: str
    description: Optional[str] = None
    triggering_event_type: EventTriggeringConditionType
    scope_type: TriggerScopeType
    scope_id: GQLId = Field(alias="scopeID")
    event_filter: str
    triggered_action_type: TriggeredActionType
    triggered_action_config: TriggeredActionConfig
    enabled: bool
    client_mutation_id: Optional[str] = None


class UpdateFilterTriggerInput(GQLBase):
    id: GQLId
    name: Optional[str] = None
    description: Optional[str] = None
    triggering_event_type: Optional[EventTriggeringConditionType] = None
    scope_type: Optional[TriggerScopeType] = None
    scope_id: Optional[GQLId] = Field(alias="scopeID", default=None)
    event_filter: Optional[str] = None
    triggered_action_type: Optional[TriggeredActionType] = None
    triggered_action_config: Optional[TriggeredActionConfig] = None
    enabled: Optional[bool] = None
    client_mutation_id: Optional[str] = None


TriggeredActionConfig.model_rebuild()
CreateFilterTriggerInput.model_rebuild()
UpdateFilterTriggerInput.model_rebuild()
