# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import List, Optional

from typing_extensions import Literal

from wandb._pydantic import GQLBase, GQLId, Typename

from .enums import ArtifactState


class ArtifactCollectionsFragment(GQLBase):
    page_info: ArtifactCollectionsFragmentPageInfo
    total_count: int
    edges: List[ArtifactCollectionsFragmentEdges]


class ArtifactCollectionsFragmentEdges(GQLBase):
    node: Optional[ArtifactCollectionsFragmentEdgesNode]
    cursor: str


class ArtifactCollectionsFragmentEdgesNode(GQLBase):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str


class ArtifactCollectionsFragmentPageInfo(GQLBase):
    end_cursor: Optional[str]
    has_next_page: bool


class ArtifactFragment(GQLBase):
    id: GQLId
    artifact_sequence: ArtifactFragmentArtifactSequence
    version_index: Optional[int]
    artifact_type: ArtifactFragmentArtifactType
    description: Optional[str]
    metadata: Optional[str]
    ttl_duration_seconds: Optional[int] = None
    ttl_is_inherited: Optional[bool] = None
    aliases: Optional[List[ArtifactFragmentAliases]] = None
    tags: Optional[List[ArtifactFragmentTags]] = None
    history_step: Optional[int] = None
    state: ArtifactState
    current_manifest: Optional[ArtifactFragmentCurrentManifest]
    commit_hash: Optional[str]
    file_count: int
    created_at: str
    updated_at: Optional[str]


class ArtifactFragmentAliases(GQLBase):
    artifact_collection: Optional[ArtifactFragmentAliasesArtifactCollection]
    alias: str


class ArtifactFragmentAliasesArtifactCollection(GQLBase):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    project: Optional[ArtifactFragmentAliasesArtifactCollectionProject]
    name: str


class ArtifactFragmentAliasesArtifactCollectionProject(GQLBase):
    entity_name: str
    name: str


class ArtifactFragmentArtifactSequence(GQLBase):
    project: Optional[ArtifactFragmentArtifactSequenceProject]
    name: str


class ArtifactFragmentArtifactSequenceProject(GQLBase):
    entity_name: str
    name: str


class ArtifactFragmentArtifactType(GQLBase):
    name: str


class ArtifactFragmentCurrentManifest(GQLBase):
    file: ArtifactFragmentCurrentManifestFile


class ArtifactFragmentCurrentManifestFile(GQLBase):
    direct_url: str


class ArtifactFragmentTags(GQLBase):
    name: str


class ArtifactPortfolioTypeFields(GQLBase):
    typename__: Typename[str] = "ArtifactPortfolio"
    id: GQLId
    name: str


class ArtifactSequenceTypeFields(GQLBase):
    typename__: Typename[str] = "ArtifactSequence"
    id: GQLId
    name: str


class ArtifactTypeFragment(GQLBase):
    typename__: Typename[str] = "ArtifactType"
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str


class ArtifactTypesFragment(GQLBase):
    edges: List[ArtifactTypesFragmentEdges]
    page_info: ArtifactTypesFragmentPageInfo


class ArtifactTypesFragmentEdges(GQLBase):
    node: Optional[ArtifactTypeFragment]
    cursor: str


class ArtifactTypesFragmentPageInfo(GQLBase):
    end_cursor: Optional[str]
    has_next_page: bool


class ArtifactsFragment(GQLBase):
    total_count: int
    edges: List[ArtifactsFragmentEdges]
    page_info: ArtifactsFragmentPageInfo


class ArtifactsFragmentEdges(GQLBase):
    node: ArtifactFragment
    version: str
    cursor: str


class ArtifactsFragmentPageInfo(GQLBase):
    end_cursor: Optional[str]
    has_next_page: bool


class FilesFragment(GQLBase):
    edges: List[FilesFragmentEdges]
    page_info: FilesFragmentPageInfo


class FilesFragmentEdges(GQLBase):
    node: Optional[FilesFragmentEdgesNode]
    cursor: str


class FilesFragmentEdgesNode(GQLBase):
    id: GQLId
    name: str
    url: Optional[str]
    size_bytes: int
    storage_path: Optional[str] = None
    mimetype: Optional[str]
    updated_at: Optional[str]
    digest: Optional[str]
    md_5: Optional[str]
    direct_url: str


class FilesFragmentPageInfo(GQLBase):
    end_cursor: Optional[str]
    has_next_page: bool


ArtifactCollectionsFragment.model_rebuild()
ArtifactCollectionsFragmentEdges.model_rebuild()
ArtifactCollectionsFragmentEdgesNode.model_rebuild()
ArtifactCollectionsFragmentPageInfo.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragmentAliases.model_rebuild()
ArtifactFragmentAliasesArtifactCollection.model_rebuild()
ArtifactFragmentAliasesArtifactCollectionProject.model_rebuild()
ArtifactFragmentArtifactSequence.model_rebuild()
ArtifactFragmentArtifactSequenceProject.model_rebuild()
ArtifactFragmentArtifactType.model_rebuild()
ArtifactFragmentCurrentManifest.model_rebuild()
ArtifactFragmentCurrentManifestFile.model_rebuild()
ArtifactFragmentTags.model_rebuild()
ArtifactPortfolioTypeFields.model_rebuild()
ArtifactSequenceTypeFields.model_rebuild()
ArtifactTypeFragment.model_rebuild()
ArtifactTypesFragment.model_rebuild()
ArtifactTypesFragmentEdges.model_rebuild()
ArtifactTypesFragmentPageInfo.model_rebuild()
ArtifactsFragment.model_rebuild()
ArtifactsFragmentEdges.model_rebuild()
ArtifactsFragmentPageInfo.model_rebuild()
FilesFragment.model_rebuild()
FilesFragmentEdges.model_rebuild()
FilesFragmentEdgesNode.model_rebuild()
FilesFragmentPageInfo.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactTypeFragment.model_rebuild()
