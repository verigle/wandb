# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import Any, List, Literal, Optional

from pydantic import Field

from wandb._pydantic import GQLId, GQLResult, Typename

from .enums import ArtifactState


class ArtifactAliasFragment(GQLResult):
    typename__: Typename[Literal["ArtifactAlias"]] = "ArtifactAlias"
    alias: str


class ArtifactCollectionConnectionFragment(GQLResult):
    page_info: PageInfoFragment = Field(alias="pageInfo")
    total_count: int = Field(alias="totalCount")
    edges: List[ArtifactCollectionConnectionFragmentEdges]


class ArtifactCollectionConnectionFragmentEdges(GQLResult):
    node: Optional[ArtifactCollectionConnectionFragmentEdgesNode]


class ArtifactCollectionFragment(GQLResult):
    typename__: Typename[Literal["ArtifactSequence", "ArtifactPortfolio"]]
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")
    tags: ArtifactCollectionFragmentTags
    aliases: Optional[ArtifactCollectionFragmentAliases] = None


class ArtifactCollectionFragmentAliases(GQLResult):
    edges: List[ArtifactCollectionFragmentAliasesEdges]


class ArtifactCollectionFragmentAliasesEdges(GQLResult):
    node: Optional[ArtifactAliasFragment]


class ArtifactCollectionFragmentTags(GQLResult):
    edges: List[ArtifactCollectionFragmentTagsEdges]


class ArtifactCollectionFragmentTagsEdges(GQLResult):
    node: TagFragment


class ArtifactCollectionProjectFragment(GQLResult):
    typename__: Typename[Literal["Project"]] = "Project"
    name: str
    entity_name: str = Field(alias="entityName")


class ArtifactFragmentAliasesArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    project: Optional[ArtifactCollectionProjectFragment]
    name: str


class ArtifactFragmentWithoutAliases(GQLResult):
    id: GQLId
    artifact_sequence: ArtifactFragmentWithoutAliasesArtifactSequence = Field(
        alias="artifactSequence"
    )
    version_index: Optional[int] = Field(alias="versionIndex")
    artifact_type: ArtifactFragmentWithoutAliasesArtifactType = Field(
        alias="artifactType"
    )
    description: Optional[str]
    metadata: Optional[Any]
    ttl_duration_seconds: Optional[Any] = Field(
        alias="ttlDurationSeconds", default=None
    )
    ttl_is_inherited: Optional[bool] = Field(alias="ttlIsInherited", default=None)
    tags: Optional[List[TagFragment]] = None
    history_step: Optional[Any] = Field(alias="historyStep", default=None)
    state: ArtifactState
    current_manifest: Optional[ArtifactFragmentWithoutAliasesCurrentManifest] = Field(
        alias="currentManifest"
    )
    commit_hash: Optional[str] = Field(alias="commitHash")
    file_count: Any = Field(alias="fileCount")
    created_at: str = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")


class ArtifactFragmentWithoutAliasesArtifactSequence(GQLResult):
    name: str
    project: Optional[ArtifactCollectionProjectFragment]


class ArtifactFragmentWithoutAliasesArtifactType(GQLResult):
    name: str


class ArtifactFragmentWithoutAliasesCurrentManifest(GQLResult):
    file: ArtifactFragmentWithoutAliasesCurrentManifestFile


class ArtifactFragmentWithoutAliasesCurrentManifestFile(GQLResult):
    direct_url: str = Field(alias="directUrl")


class ArtifactPortfolioTypeFields(GQLResult):
    typename__: Typename[Literal["ArtifactPortfolio"]] = "ArtifactPortfolio"
    id: GQLId
    name: str


class ArtifactSequenceTypeFields(GQLResult):
    typename__: Typename[Literal["ArtifactSequence"]] = "ArtifactSequence"
    id: GQLId
    name: str


class ArtifactTypeConnectionFragment(GQLResult):
    edges: List[ArtifactTypeConnectionFragmentEdges]
    page_info: PageInfoFragment = Field(alias="pageInfo")


class ArtifactTypeConnectionFragmentEdges(GQLResult):
    node: Optional[ArtifactTypeFragment]


class ArtifactTypeFragment(GQLResult):
    typename__: Typename[Literal["ArtifactType"]] = "ArtifactType"
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")


class ArtifactsFragment(GQLResult):
    total_count: int = Field(alias="totalCount")
    edges: List[ArtifactsFragmentEdges]
    page_info: PageInfoFragment = Field(alias="pageInfo")


class ArtifactsFragmentEdges(GQLResult):
    node: ArtifactFragment
    version: str


class FileUrlsFragment(GQLResult):
    page_info: PageInfoFragment = Field(alias="pageInfo")
    edges: List[FileUrlsFragmentEdges]


class FileUrlsFragmentEdges(GQLResult):
    node: Optional[FileUrlsFragmentEdgesNode]


class FileUrlsFragmentEdgesNode(GQLResult):
    name: str
    direct_url: str = Field(alias="directUrl")


class FilesFragment(GQLResult):
    edges: List[FilesFragmentEdges]
    page_info: PageInfoFragment = Field(alias="pageInfo")


class FilesFragmentEdges(GQLResult):
    node: Optional[FilesFragmentEdgesNode]


class FilesFragmentEdgesNode(GQLResult):
    id: GQLId
    name: str
    url: Optional[str]
    size_bytes: Any = Field(alias="sizeBytes")
    storage_path: Optional[str] = Field(alias="storagePath", default=None)
    mimetype: Optional[str]
    updated_at: Optional[str] = Field(alias="updatedAt")
    digest: Optional[str]
    md_5: Optional[str] = Field(alias="md5")
    direct_url: str = Field(alias="directUrl")


class MembershipWithArtifact(GQLResult):
    id: GQLId
    artifact_collection: Optional[MembershipWithArtifactArtifactCollection] = Field(
        alias="artifactCollection"
    )
    artifact: Optional[ArtifactFragment]


class MembershipWithArtifactArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    id: GQLId
    name: str
    project: Optional[ArtifactCollectionProjectFragment]


class PageInfoFragment(GQLResult):
    typename__: Typename[Literal["PageInfo"]] = "PageInfo"
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class RegistriesPage(GQLResult):
    page_info: PageInfoFragment = Field(alias="pageInfo")
    edges: List[RegistriesPageEdges]


class RegistriesPageEdges(GQLResult):
    node: Optional[RegistryFragment]


class RegistryCollectionConnectionFragment(GQLResult):
    total_count: int = Field(alias="totalCount")
    page_info: PageInfoFragment = Field(alias="pageInfo")
    edges: List[RegistryCollectionConnectionFragmentEdges]


class RegistryCollectionConnectionFragmentEdges(GQLResult):
    node: Optional[RegistryCollectionConnectionFragmentEdgesNode]


class RegistryCollectionFragment(GQLResult):
    typename__: Typename[Literal["ArtifactSequence", "ArtifactPortfolio"]]
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")
    tags: RegistryCollectionFragmentTags
    project: Optional[ArtifactCollectionProjectFragment]
    default_artifact_type: RegistryCollectionFragmentDefaultArtifactType = Field(
        alias="defaultArtifactType"
    )
    aliases: RegistryCollectionFragmentAliases


class RegistryCollectionFragmentAliases(GQLResult):
    edges: List[RegistryCollectionFragmentAliasesEdges]


class RegistryCollectionFragmentAliasesEdges(GQLResult):
    node: Optional[ArtifactAliasFragment]


class RegistryCollectionFragmentDefaultArtifactType(GQLResult):
    name: str


class RegistryCollectionFragmentTags(GQLResult):
    edges: List[RegistryCollectionFragmentTagsEdges]


class RegistryCollectionFragmentTagsEdges(GQLResult):
    node: TagFragment


class RegistryFragment(GQLResult):
    id: GQLId
    allow_all_artifact_types_in_registry: bool = Field(
        alias="allowAllArtifactTypesInRegistry"
    )
    artifact_types: RegistryFragmentArtifactTypes = Field(alias="artifactTypes")
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    access: Optional[str]


class RegistryFragmentArtifactTypes(GQLResult):
    edges: List[RegistryFragmentArtifactTypesEdges]


class RegistryFragmentArtifactTypesEdges(GQLResult):
    node: Optional[RegistryFragmentArtifactTypesEdgesNode]


class RegistryFragmentArtifactTypesEdgesNode(GQLResult):
    name: str


class RegistryVersionsPage(GQLResult):
    page_info: PageInfoFragment = Field(alias="pageInfo")
    edges: List[RegistryVersionsPageEdges]


class RegistryVersionsPageEdges(GQLResult):
    node: Optional[RegistryVersionsPageEdgesNode]


class RegistryVersionsPageEdgesNode(GQLResult):
    artifact_collection: Optional[RegistryVersionsPageEdgesNodeArtifactCollection] = (
        Field(alias="artifactCollection")
    )
    version_index: Optional[int] = Field(alias="versionIndex")
    artifact: Optional[ArtifactFragmentWithoutAliases]
    aliases: List[ArtifactAliasFragment]


class RegistryVersionsPageEdgesNodeArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    project: Optional[ArtifactCollectionProjectFragment]
    name: str


class TagFragment(GQLResult):
    typename__: Typename[Literal["Tag"]] = "Tag"
    name: str


class ArtifactFragmentAliases(ArtifactAliasFragment):
    artifact_collection: Optional[ArtifactFragmentAliasesArtifactCollection] = Field(
        alias="artifactCollection"
    )


class ArtifactCollectionConnectionFragmentEdgesNode(ArtifactCollectionFragment):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]


class ArtifactFragment(ArtifactFragmentWithoutAliases):
    aliases: Optional[List[ArtifactFragmentAliases]] = None


class RegistryCollectionConnectionFragmentEdgesNode(RegistryCollectionFragment):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]


ArtifactAliasFragment.model_rebuild()
ArtifactCollectionConnectionFragment.model_rebuild()
ArtifactCollectionConnectionFragmentEdges.model_rebuild()
ArtifactCollectionFragment.model_rebuild()
ArtifactCollectionFragmentAliases.model_rebuild()
ArtifactCollectionFragmentAliasesEdges.model_rebuild()
ArtifactCollectionFragmentTags.model_rebuild()
ArtifactCollectionFragmentTagsEdges.model_rebuild()
ArtifactCollectionProjectFragment.model_rebuild()
ArtifactFragmentAliasesArtifactCollection.model_rebuild()
ArtifactFragmentWithoutAliases.model_rebuild()
ArtifactFragmentWithoutAliasesArtifactSequence.model_rebuild()
ArtifactFragmentWithoutAliasesArtifactType.model_rebuild()
ArtifactFragmentWithoutAliasesCurrentManifest.model_rebuild()
ArtifactFragmentWithoutAliasesCurrentManifestFile.model_rebuild()
ArtifactPortfolioTypeFields.model_rebuild()
ArtifactSequenceTypeFields.model_rebuild()
ArtifactTypeConnectionFragment.model_rebuild()
ArtifactTypeConnectionFragmentEdges.model_rebuild()
ArtifactTypeFragment.model_rebuild()
ArtifactsFragment.model_rebuild()
ArtifactsFragmentEdges.model_rebuild()
FileUrlsFragment.model_rebuild()
FileUrlsFragmentEdges.model_rebuild()
FileUrlsFragmentEdgesNode.model_rebuild()
FilesFragment.model_rebuild()
FilesFragmentEdges.model_rebuild()
FilesFragmentEdgesNode.model_rebuild()
MembershipWithArtifact.model_rebuild()
MembershipWithArtifactArtifactCollection.model_rebuild()
PageInfoFragment.model_rebuild()
RegistriesPage.model_rebuild()
RegistriesPageEdges.model_rebuild()
RegistryCollectionConnectionFragment.model_rebuild()
RegistryCollectionConnectionFragmentEdges.model_rebuild()
RegistryCollectionFragment.model_rebuild()
RegistryCollectionFragmentAliases.model_rebuild()
RegistryCollectionFragmentAliasesEdges.model_rebuild()
RegistryCollectionFragmentDefaultArtifactType.model_rebuild()
RegistryCollectionFragmentTags.model_rebuild()
RegistryCollectionFragmentTagsEdges.model_rebuild()
RegistryFragment.model_rebuild()
RegistryFragmentArtifactTypes.model_rebuild()
RegistryFragmentArtifactTypesEdges.model_rebuild()
RegistryFragmentArtifactTypesEdgesNode.model_rebuild()
RegistryVersionsPage.model_rebuild()
RegistryVersionsPageEdges.model_rebuild()
RegistryVersionsPageEdgesNode.model_rebuild()
RegistryVersionsPageEdgesNodeArtifactCollection.model_rebuild()
TagFragment.model_rebuild()
ArtifactAliasFragment.model_rebuild()
ArtifactFragmentAliases.model_rebuild()
ArtifactAliasFragment.model_rebuild()
ArtifactAliasFragment.model_rebuild()
ArtifactCollectionConnectionFragmentEdgesNode.model_rebuild()
ArtifactCollectionProjectFragment.model_rebuild()
ArtifactCollectionProjectFragment.model_rebuild()
ArtifactCollectionProjectFragment.model_rebuild()
ArtifactCollectionProjectFragment.model_rebuild()
ArtifactCollectionProjectFragment.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragmentWithoutAliases.model_rebuild()
ArtifactTypeFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
PageInfoFragment.model_rebuild()
RegistryCollectionConnectionFragmentEdgesNode.model_rebuild()
RegistryFragment.model_rebuild()
TagFragment.model_rebuild()
TagFragment.model_rebuild()
TagFragment.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragment.model_rebuild()
